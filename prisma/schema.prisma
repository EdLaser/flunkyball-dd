generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model players {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  first_name String
  last_name  String?
  slogan     String?
  plays_in   String?  @db.Uuid
  public_id  String?  @unique
  phone      String?
  teams      teams?   @relation(fields: [plays_in], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model teams {
  id                                  String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                String?                    @default("Anonymus")
  slogan                              String
  created_at                          DateTime                   @default(now()) @db.Timestamptz(6)
  matches_matches_away_team_idToteams matches[]                  @relation("matches_away_team_idToteams")
  matches_matches_home_team_idToteams matches[]                  @relation("matches_home_team_idToteams")
  matches_matches_match_winnerToteams matches[]                  @relation("matches_match_winnerToteams")
  players                             players[]
  pre_registrations                   pre_registrations[]
  tournament_registrations            tournament_registrations[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tournaments {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                    String                     @unique
  description              String?
  tournament_date          DateTime                   @db.Timestamp(6)
  price                    String
  created_at               DateTime                   @default(now()) @db.Timestamptz(6)
  status                   tournament_stauts          @default(open)
  location_id              String?                    @db.Uuid
  groups                   groups[]
  pre_registrations        pre_registrations[]
  stages                   stages[]
  tournament_registrations tournament_registrations[]
  locations                locations?                 @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model groups {
  group_id      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  group_name    String
  stage_id      String      @db.Uuid
  tournament_id String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stages        stages      @relation(fields: [stage_id], references: [stage_id], onDelete: NoAction, onUpdate: NoAction)
  tournaments   tournaments @relation(fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  matches       matches[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model matches {
  match_id                          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                        DateTime? @default(now()) @db.Timestamptz(6)
  stage_id                          String    @db.Uuid
  group_id                          String?   @db.Uuid
  home_team_id                      String    @db.Uuid
  away_team_id                      String    @db.Uuid
  match_winner                      String    @db.Uuid
  teams_matches_away_team_idToteams teams     @relation("matches_away_team_idToteams", fields: [away_team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  groups                            groups?   @relation(fields: [group_id], references: [group_id], onDelete: NoAction, onUpdate: NoAction)
  teams_matches_home_team_idToteams teams     @relation("matches_home_team_idToteams", fields: [home_team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teams_matches_match_winnerToteams teams     @relation("matches_match_winnerToteams", fields: [match_winner], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stages                            stages    @relation(fields: [stage_id], references: [stage_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model stages {
  stage_id      String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  stage_name    String
  sequence      Int
  tournament_id String?      @db.Uuid
  groups        groups[]
  matches       matches[]
  tournaments   tournaments? @relation(fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model pre_registrations {
  pre_id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  tournament_id String      @db.Uuid
  team_id       String      @db.Uuid
  teams         teams       @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tournaments   tournaments @relation(fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tournament_registrations {
  registration_id String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime    @default(now()) @db.Timestamptz(6)
  tournament_id   String      @db.Uuid
  team_id         String      @db.Uuid
  teams           teams       @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tournaments     tournaments @relation(fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model locations {
  location_id  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  name         String        @unique
  street       String
  city         String
  postal_code  String
  house_number String
  description  String?
  directions   String?
  tournaments  tournaments[]
}

enum tournament_stauts {
  open
  finished
  in_progress
}
